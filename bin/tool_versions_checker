#!/usr/bin/env bash

set -euo pipefail

readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

check_tool_versions_file() {
    if [[ ! -f .tool-versions ]]; then
        print_status "$RED" "‚ùå .tool-versions file not found"
        exit 1
    fi
}

verify_version() {
    local tool_name=$1
    local grep_pattern=$2
    local version_command=$3
    local version_filter=$4

    print_status "$BLUE" "üîç Verifying ${tool_name} version..."

    local expected_version
    expected_version=$(grep "^${grep_pattern}" .tool-versions | awk '{print $2}')

    if [[ -z "$expected_version" ]]; then
        print_status "$RED" "‚ùå No ${tool_name} version specified in .tool-versions"
        return 1
    fi

    local actual_version
    if ! actual_version=$(eval "$version_command" 2>/dev/null | eval "$version_filter"); then
        print_status "$RED" "‚ùå Failed to get ${tool_name} version"
        return 1
    fi

    echo "Expected ${tool_name}: $expected_version"
    echo "Actual ${tool_name}: $actual_version"

    if [[ "$actual_version" == "$expected_version"* ]]; then
        print_status "$GREEN" "‚úÖ ${tool_name} version matches"
        return 0
    else
        print_status "$RED" "‚ùå ${tool_name} version mismatch"
        return 1
    fi
}

main() {
    check_tool_versions_file

    local exit_code=0

    if ! verify_version "Ruby" "ruby" "ruby --version" "awk '{print \$2}'"; then
        exit_code=1
    fi

    echo

    if ! verify_version "Node.js" "nodejs" "node --version" "sed 's/^v//'"; then
        exit_code=1
    fi

    if [[ $exit_code -eq 0 ]]; then
        echo
        print_status "$GREEN" "üéâ All version checks passed!"
    else
        echo
        print_status "$RED" "üí• Some version checks failed"
    fi

    exit $exit_code
}

main "$@"
